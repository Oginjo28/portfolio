---
title: My Take on Next.js, React, and the Current Scene
publishedDate: 2025-07-22
excerpt: >-
  Web Dev in 2025: What’s Working, What’s Worth It


  The web dev landscape’s moving fast, but a few tools still hold strong. I’m
  building most of my projects with Next.js and React—they’re powerful,
  especially with features like the App Router and React Server Components that
  speed up load times and boost SEO. But they’re not lightweight. On smaller
  builds, I feel the bloat, and I get why some devs are bouncing to leaner
  setups.


  Lately, I’ve been eyeing Svelte, SolidJS, and Qwik—and I’m impressed. These
  frameworks feel clean, fast, and refreshingly simple. If React ever starts to
  feel like overkill, these are solid alternatives.


  Also: don’t sleep on AI tools. I used to roll my eyes at them, but GitHub
  Copilot and Vercel’s v0 now save me hours. They’re not perfect, but they crush
  boilerplate work. Add Tailwind CSS and Shadcn UI into the mix, and you’ve got
  a killer combo for shipping fast, clean UIs.


  Bottom line: stick with what works for you, but don’t be afraid to try new
  tools. The scene’s evolving, and staying sharp means staying curious.
readTime: 5
featured: true
tags:
  - Web Development
  - Next.js
  - React
  - AI
coverImage: /images/blog/my-take-on-next-js-react-and-the-current-scene/coverImage.svg
author:
  name: Ognjen Adzic
  avatar: >-
    /images/authors/my-take-on-next-js-react-and-the-current-scene/author/avatar.png
---
My thoughts on what’s driving web dev today: Next.js, React, lightweight frameworks, and AI tools - What’s working and what’s worth your time.

I’m always tinkering with web projects, and the dev world’s buzzing with shifts that keep things fresh. Next.js and React are still my main tools, but there’s new stuff worth checking out. I’ve been scrolling through X and messing around with code to see what’s real. Here’s my take on what’s shaping web dev, straight-up.

### Next.js: My Workhorse, But It’s Got Weight

Next.js is my go-to for most builds. Its App Router and React Server Components (RSC) make sites load fast by slashing client-side JavaScript. The new Partial Prerendering feature is slick—static speed with dynamic flexibility. I’ve shipped apps that feel instant and rank well, which clients love. Big names like Netflix are all over this for a reason.

That said, Next.js can be a lot. Some X devs call it bloated, and I feel that when I’m overcomplicating a small project. It’s not always the right fit, but for anything needing scale or SEO, it’s tough to beat.

### React: Still Solid, But Not Without Issues

React’s my comfort zone—tons of devs (40.8%) stick with it, and I’m no exception. It’s great for complex UIs, and RSC with Server Actions lets me handle backend logic without messy APIs. My apps are leaner, and they perform better, especially on slow connections.

But React’s complexity is real. Hooks and context can make your head spin, and X posts echo that frustration. The React Compiler’s floating around in beta, promising to simplify optimization, but I’m skeptical—it feels like a patch for React’s own baggage. Still, it’s too flexible to drop.

### Lightweight Frameworks Are Making Noise

Svelte, SolidJS, and Qwik are popping up everywhere, and I’m intrigued. I tried Svelte for a side project, and it’s like coding with a clear head—no runtime clutter. SolidJS’s reactivity is smooth, and Qwik’s instant startup is perfect for speed-obsessed apps. They’re not dethroning React yet, but they’re keeping it honest.

These are great for smaller projects or when you want to experiment. I’m eyeing Svelte for my next quick build.

### AI Tools Are Legit Time-Savers

I used to shrug off AI dev tools, but they’re clutch now. GitHub Copilot and Vercel’s v0 churn out React components or debug Next.js setups faster than I can search for answers. Most frontend devs (75.8%) are using AI for code or testing, and I’m hooked. It’s not flawless—sometimes it’s like a rookie dev guessing—but it cuts out the grunt work.

These tools let me focus on solving problems, not writing boilerplate. If you’re not using them, you’re working harder than you need to.

### Tailwind and Shadcn UI: My UI Shortcut

Tailwind CSS is my styling lifeline. It’s quick, flexible, and keeps my designs clean without endless CSS files. Pair it with Shadcn UI’s customizable components, and I’m building polished UIs in hours, not days. X devs are obsessed with this stack, and I get why—it’s a no-brainer.

This combo saves time and keeps things consistent. If you’re still grinding out raw CSS, give Tailwind a shot.

### What Devs Are Talking About

X is raw with opinions. Some devs are switching to Vite or TanStack Router for leaner setups, and I see the appeal. Others are hyped about Next.js’s new Form component and faster load times. But there’s pushback—React’s complexity is driving some to Svelte’s simplicity. I’m sticking with React and Next.js for now, but I’m not blind to why people are jumping ship.

### My Take on the Scene

Next.js and React are still the backbone for big projects—reliable, with huge communities. But Svelte, SolidJS, and Qwik are worth a look for their speed and simplicity. AI tools are a must to stay efficient, and Tailwind with Shadcn UI is my go-to for fast, clean designs. Web dev’s a moving target, but that’s what keeps it fun. Pick what fits your project, skip the hype, and build something solid.
